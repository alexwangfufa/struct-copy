// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MaterialGroupClient is the client API for MaterialGroup service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MaterialGroupClient interface {
	Save(ctx context.Context, in *SaveMaterialGroupRequest, opts ...grpc.CallOption) (*MaterialGroupModel, error)
}

type materialGroupClient struct {
	cc grpc.ClientConnInterface
}

func NewMaterialGroupClient(cc grpc.ClientConnInterface) MaterialGroupClient {
	return &materialGroupClient{cc}
}

func (c *materialGroupClient) Save(ctx context.Context, in *SaveMaterialGroupRequest, opts ...grpc.CallOption) (*MaterialGroupModel, error) {
	out := new(MaterialGroupModel)
	err := c.cc.Invoke(ctx, "/materialGroup.MaterialGroup/Save", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MaterialGroupServer is the server API for MaterialGroup service.
// All implementations must embed UnimplementedMaterialGroupServer
// for forward compatibility
type MaterialGroupServer interface {
	Save(context.Context, *SaveMaterialGroupRequest) (*MaterialGroupModel, error)
	mustEmbedUnimplementedMaterialGroupServer()
}

// UnimplementedMaterialGroupServer must be embedded to have forward compatible implementations.
type UnimplementedMaterialGroupServer struct {
}

func (UnimplementedMaterialGroupServer) Save(context.Context, *SaveMaterialGroupRequest) (*MaterialGroupModel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedMaterialGroupServer) mustEmbedUnimplementedMaterialGroupServer() {}

// UnsafeMaterialGroupServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MaterialGroupServer will
// result in compilation errors.
type UnsafeMaterialGroupServer interface {
	mustEmbedUnimplementedMaterialGroupServer()
}

func RegisterMaterialGroupServer(s grpc.ServiceRegistrar, srv MaterialGroupServer) {
	s.RegisterService(&MaterialGroup_ServiceDesc, srv)
}

func _MaterialGroup_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveMaterialGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialGroupServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/materialGroup.MaterialGroup/Save",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialGroupServer).Save(ctx, req.(*SaveMaterialGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MaterialGroup_ServiceDesc is the grpc.ServiceDesc for MaterialGroup service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MaterialGroup_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "materialGroup.MaterialGroup",
	HandlerType: (*MaterialGroupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Save",
			Handler:    _MaterialGroup_Save_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/material-group/v1/material-group.proto",
}
